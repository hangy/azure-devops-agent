name: ci-bake

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 3'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to the Container registry
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build all targets with bake (non-main local build only)
        if: github.ref != 'refs/heads/main'
        uses: docker/bake-action@v6
        with:
          files: docker-bake.hcl
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max

      - name: Build all targets with bake (main - push to GHCR by digest)
        if: github.ref == 'refs/heads/main'
        id: bake
        uses: docker/bake-action@v6
        with:
          files: docker-bake.hcl
          push: true
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            PUSH_GHCR=true
            REGISTRY=${{ env.REGISTRY }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            *.attest=type=provenance,mode=max
            *.sbom=generator=syft

      - name: Inspect pushed images
        if: github.ref == 'refs/heads/main'
        run: |
          for TARGET in dotnet java android flutter; do
            echo "=== ${TARGET} ==="
            docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${TARGET}
          done

      - name: Install Trivy
        if: github.ref == 'refs/heads/main'
        run: |
          TRIVY_VERSION=0.54.1
          curl -fsSL https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -o trivy.tar.gz
          tar -xzf trivy.tar.gz trivy
          sudo mv trivy /usr/local/bin/
          trivy --version

      - name: Vulnerability scan (fail on HIGH/CRITICAL)
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          FAILED=0
          for TARGET in dotnet java android flutter; do
            REF=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${TARGET}
            echo "Scanning $REF"
            trivy image --scanners vuln --exit-code 1 --severity HIGH,CRITICAL --ignore-unfixed --timeout 10m "$REF" || FAILED=1
          done
          if [ $FAILED -ne 0 ]; then
            echo "Vulnerability threshold exceeded (HIGH/CRITICAL). Failing build before signing." >&2
            exit 1
          fi

      - name: Install Cosign
        if: github.ref == 'refs/heads/main'
        run: |
          COSIGN_VERSION=v2.2.4
          curl -fsSL "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64" -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/
          cosign version

      - name: Sign images and attestations (keyless)
        if: github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          for TARGET in dotnet java android flutter; do
            REF=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${TARGET}
            DIGEST=$(docker buildx imagetools inspect "$REF" --format '{{json .Manifest.Digest}}' | tr -d '"')
            echo "Signing $REF@$DIGEST"
            cosign sign "$REF@$DIGEST" --yes
            echo "Verifying provenance attestation exists for $REF"
            cosign verify-attestation "$REF@$DIGEST" --type=provenance || true
          done

      - name: Download SBOM attestations generated by BuildKit
        if: github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
          mkdir -p sbom
          MISSING=0
          for TARGET in dotnet java android flutter; do
            REF=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${TARGET}
            DIGEST=$(docker buildx imagetools inspect "$REF" --format '{{json .Manifest.Digest}}' | tr -d '"')
            OUT=sbom/${TARGET}-sbom.json
            echo "Attempting to download SBOM for $REF@$DIGEST"
            if cosign download sbom "$REF@$DIGEST" > "$OUT" 2>/dev/null; then
              echo "SBOM downloaded to $OUT"
            else
              echo "No SBOM attestation found for $REF (BuildKit docker exporter limitation or feature unsupported)." >&2
              MISSING=$((MISSING+1))
              rm -f "$OUT"
            fi
          done
          if [ $MISSING -eq 4 ]; then
            echo "No SBOMs were downloadable; failing so this is visible." >&2
            exit 1
          fi

      - name: Sign SBOM attestations (keyless)
        if: github.ref == 'refs/heads/main'
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          set -euo pipefail
            for TARGET in dotnet java android flutter; do
              REF=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${TARGET}
              DIGEST=$(docker buildx imagetools inspect "$REF" --format '{{json .Manifest.Digest}}' | tr -d '"')
              SBOM=sbom/${TARGET}-sbom.json
              [ -f "$SBOM" ] || { echo "Skipping $TARGET (no SBOM file)"; continue; }
              # Detect format for predicate type
              if grep -q '"spdxVersion"' "$SBOM"; then
                TYPE=spdxjson
              else
                TYPE=cyclonedx
              fi
              echo "Attesting SBOM for $REF@$DIGEST as type=$TYPE"
              cosign attest --predicate "$SBOM" --type "$TYPE" "$REF@$DIGEST" --yes
            done

      - name: Submit dependencies to GitHub Dependency Graph
        if: github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          python <<'PY'
            import json, os, datetime, urllib.request, sys
            repo=os.environ['GITHUB_REPOSITORY']
            owner,name=repo.split('/')
            token=os.environ['GITHUB_TOKEN']
            resolved=[]
            for fn in os.listdir('sbom'):
              if not fn.endswith('-sbom.json'):
                continue
              path=os.path.join('sbom',fn)
              try:
                with open(path) as f:
                  data=json.load(f)
              except Exception as e:
                print(f"Skipping {fn}: {e}")
                continue
              # CycloneDX components
              if isinstance(data, dict) and 'components' in data:
                for comp in data.get('components', []):
                  purl=comp.get('purl')
                  if not purl: continue
                  if '@' not in purl or not purl.startswith('pkg:'): continue
                  body=purl[4:]
                  before,_version=body.rsplit('@',1)
                  if any(before.startswith(pfx) for pfx in ('npm/','pypi/','maven/','golang/','github/')):
                    resolved.append({'package_url':purl,'relationship':'direct'})
              # SPDX packages
              if isinstance(data, dict) and 'packages' in data:
                for pkg in data.get('packages', []):
                  for ext in pkg.get('externalRefs', []):
                    if ext.get('referenceType') == 'purl':
                      purl=ext.get('referenceLocator')
                      if not purl or '@' not in purl or not purl.startswith('pkg:'): continue
                      body=purl[4:]
                      before,_version=body.rsplit('@',1)
                      if any(before.startswith(pfx) for pfx in ('npm/','pypi/','maven/','golang/','github/')):
                        resolved.append({'package_url':purl,'relationship':'direct'})
            snapshot={
             'version':1,
             'sha':os.environ.get('GITHUB_SHA'),
             'ref':os.environ.get('GITHUB_REF'),
             'job':{'correlator':'container-sbom','id':datetime.datetime.utcnow().isoformat()+'Z'},
             'scanner':{'name':'syft','version':'(via workflow)'},
             'manifests':{'container-sbom':{'resolved':resolved}}
            }
            req=urllib.request.Request(
              f'https://api.github.com/repos/{owner}/{name}/dependency-graph/snapshots',
              data=json.dumps(snapshot).encode(),
              headers={'Authorization':f'Bearer {token}','Accept':'application/vnd.github+json','Content-Type':'application/json'}
            )
            with urllib.request.urlopen(req) as r:
              body=r.read().decode()
              print('Dependency submission status', r.status)
              print(body)
              if r.status>=300:
                sys.exit(1)
          PY

      - name: Upload SBOM artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/
          retention-days: 14
