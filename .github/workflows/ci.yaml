name: ci

on:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * 3'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
        - docker: linux/amd64
          agent: x64
    permissions:
      contents: read
      packages: write
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Prepare
      run: |
        platform=${{ matrix.platform.docker }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
          # network=host driver-opt needed to push to local registry
          driver-opts: network=host

    - name: Build base image
      id: buildbase
      uses: docker/build-push-action@v6
      with:
        context: azure-devops-agent-on-kubernetes/src
        file: azure-devops-agent-on-kubernetes/Dockerfile
        push: true
        platforms: ${{ matrix.platform.docker }}
        tags: localhost:5000/agent-base-image:latest
        build-args: |
          ARG_VSTS_AGENT_VERSION=4.260.0
          PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push by digest dotnet
      id: build-dotnet
      uses: docker/build-push-action@v6
      with:
        context: src
        file: Dockerfile
        push: true
        platforms: ${{ matrix.platform.docker }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        target: agent-dotnet
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        build-args: |
          ARG_UBUNTU_BASE_IMAGE=agent-base-image
          PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-contexts: |
          agent-base-image=docker-image://localhost:5000/agent-base-image:latest

    - name: Build and push by digest java
      id: build-java
      uses: docker/build-push-action@v6
      with:
        context: src
        file: Dockerfile
        push: true
        platforms: ${{ matrix.platform.docker }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        target: agent-java
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        build-args: |
          ARG_UBUNTU_BASE_IMAGE=agent-base-image
          PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-contexts: |
          agent-base-image=docker-image://localhost:5000/agent-base-image:latest

    - name: Build and push by digest android
      id: build-android
      uses: docker/build-push-action@v6
      with:
        context: src
        file: Dockerfile
        push: true
        platforms: ${{ matrix.platform.docker }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        target: agent-android
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        build-args: |
          ARG_UBUNTU_BASE_IMAGE=agent-base-image
          PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-contexts: |
          agent-base-image=docker-image://localhost:5000/agent-base-image:latest

    - name: Build and push by digest flutter
      id: build-flutter
      uses: docker/build-push-action@v6
      with:
        context: src
        file: Dockerfile
        push: true
        platforms: ${{ matrix.platform.docker }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        target: agent-flutter
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        build-args: |
          ARG_UBUNTU_BASE_IMAGE=agent-base-image
          PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-contexts: |
          agent-base-image=docker-image://localhost:5000/agent-base-image:latest

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests/dotnet ${{ runner.temp }}/digests/java ${{ runner.temp }}/digests/android ${{ runner.temp }}/digests/flutter
        digest="${{ steps.build-dotnet.outputs.digest }}"
        touch "${{ runner.temp }}/digests/dotnet/${digest#sha256:}"
        digest="${{ steps.build-java.outputs.digest }}"
        touch "${{ runner.temp }}/digests/java/${digest#sha256:}"
        digest="${{ steps.build-android.outputs.digest }}"
        touch "${{ runner.temp }}/digests/android/${digest#sha256:}"
        digest="${{ steps.build-flutter.outputs.digest }}"
        touch "${{ runner.temp }}/digests/flutter/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
    - build
    permissions:
      contents: read
      packages: write
    steps:
    - name: Download digests
      uses: actions/download-artifact@v5
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta dotnet
      id: meta-dotnet
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-dotnet
          type=ref,event=pr,suffix=-dotnet
          type=semver,pattern={{version}},suffix=-dotnet
          type=semver,pattern={{major}}.{{minor}},suffix=-dotnet

    - name: Create manifest list and push dotnet
      working-directory: ${{ runner.temp }}/digests/dotnet
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

    - name: Docker meta java
      id: meta-java
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-java
          type=ref,event=pr,suffix=-java
          type=semver,pattern={{version}},suffix=-java
          type=semver,pattern={{major}}.{{minor}},suffix=-java

    - name: Create manifest list and push java
      working-directory: ${{ runner.temp }}/digests/java
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

    - name: Docker meta android
      id: meta-android
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-android
          type=ref,event=pr,suffix=-android
          type=semver,pattern={{version}},suffix=-android
          type=semver,pattern={{major}}.{{minor}},suffix=-android

    - name: Create manifest list and push android
      working-directory: ${{ runner.temp }}/digests/android
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

    - name: Docker meta flutter
      id: meta-flutter
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch,suffix=-flutter
          type=ref,event=pr,suffix=-flutter
          type=semver,pattern={{version}},suffix=-flutter
          type=semver,pattern={{major}}.{{minor}},suffix=-flutter

    - name: Create manifest list and push flutter
      working-directory: ${{ runner.temp }}/digests/flutter
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

    - name: Inspect images
      run: |
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-dotnet.outputs.version }}
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-java.outputs.version }}
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-android.outputs.version }}
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta-flutter.outputs.version }}
