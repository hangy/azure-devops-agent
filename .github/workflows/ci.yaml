name: ci

on:
  push:
    branches:
    - main
  schedule:
    - cron: '0 0 * * 3'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
        - docker: linux/amd64
          agent: x64
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Prepare
      run: |
        platform=${{ matrix.platform.docker }}
        echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build base image
      id: buildbase
      uses: docker/build-push-action@v6
      with:
        context: azure-devops-agent-on-kubernetes/src
        file: azure-devops-agent-on-kubernetes/Dockerfile
        push: false
        platforms: ${{ matrix.platform.docker }}
        tags: tmp:${{ github.sha }}-${{ env.PLATFORM_PAIR }}
        build-args: |
          --build-arg ARG_VSTS_AGENT_VERSION=4.252.0
          --build-arg PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push by digest
      id: build
      uses: docker/build-push-action@v6
      with:
        context: src
        file: Dockerfile
        push: true
        platforms: ${{ matrix.platform.docker }}
        labels: ${{ steps.meta.outputs.labels }}
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        outputs: type=image,push-by-digest=true,name-canonical=true,push=true
        build-args: |
          --build-arg ARG_UBUNTU_BASE_IMAGE=tmp
          --build-arg ARG_UBUNTU_BASE_IMAGE_TAG=${{ github.sha }}-${{ env.PLATFORM_PAIR }}
          --build-arg PLATFORM=${{ matrix.platform.agent }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Export digest
      run: |
        mkdir -p ${{ runner.temp }}/digests
        digest="${{ steps.build.outputs.digest }}"
        touch "${{ runner.temp }}/digests/${digest#sha256:}"

    - name: Upload digest
      uses: actions/upload-artifact@v4
      with:
        name: digests-${{ env.PLATFORM_PAIR }}
        path: ${{ runner.temp }}/digests/*
        if-no-files-found: error
        retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
    - build
    permissions:
      contents: read
      packages: write
    steps:
    - name: Download digests
      uses: actions/download-artifact@v4
      with:
        path: ${{ runner.temp }}/digests
        pattern: digests-*
        merge-multiple: true

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Create manifest list and push
      working-directory: ${{ runner.temp }}/digests
      run: |
        docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
          $(printf '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@sha256:%s ' *)

    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
